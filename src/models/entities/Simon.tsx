/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useAnimations, useGLTF } from "@react-three/drei";
import { useGraph } from "@react-three/fiber";
import { RigidBody } from "@react-three/rapier";
import { useEffect, useMemo, useRef } from "react";
import { AnimationClip, Bone, Group, MeshStandardMaterial, SkinnedMesh } from "three";
import { GLTF, SkeletonUtils } from "three-stdlib";

export function Simon(props: React.JSX.IntrinsicElements["group"]) {
    const group = useRef<Group>(null);

    const { scene, animations } = useGLTF("/models/entities/simon.glb") as GLTFResult;
    const clone = useMemo(() => SkeletonUtils.clone(scene), [ scene ]);

    const { nodes, materials } = useGraph(clone) as GLTFResult;

    const { actions } = useAnimations(animations, group);

    useEffect(() => {
        actions.Sitting_idle && actions.Sitting_idle.play();
    }, [ actions.Sitting_idle ]);

    return (
        <>
            <RigidBody type="fixed" position={[ 4.2, 0.25, 2.5 ]} includeInvisible={true}>
                <mesh visible={false}>
                    <boxGeometry args={[ 0.5, 1.5, 1 ]} />
                </mesh>
            </RigidBody>
            <group ref={group} {...props} dispose={null} position={[ 4.2, -0.48, 2.5 ]} rotation={[ 0, -Math.PI, 0 ]}>
                <group name="Scene">
                    <group name="Armature" rotation={[ Math.PI / 2, 0, 0 ]} scale={0.01}>
                        <primitive object={nodes.mixamorigHips} />
                    </group>
                    <skinnedMesh
                        name="Boy01_Body_Geo"
                        geometry={nodes.Boy01_Body_Geo.geometry}
                        material={materials.Boy01_Body_MAT1}
                        skeleton={nodes.Boy01_Body_Geo.skeleton}
                        rotation={[ Math.PI / 2, 0, 0 ]}
                        scale={0.01}
                    />
                    <skinnedMesh
                        name="Boy01_Brows_Geo"
                        geometry={nodes.Boy01_Brows_Geo.geometry}
                        material={materials.Boy01_Brows_MAT2}
                        skeleton={nodes.Boy01_Brows_Geo.skeleton}
                        rotation={[ Math.PI / 2, 0, 0 ]}
                        scale={0.01}
                    />
                    <skinnedMesh
                        name="Boy01_Eyes_Geo"
                        geometry={nodes.Boy01_Eyes_Geo.geometry}
                        material={materials.Boy01_Brows_MAT2}
                        skeleton={nodes.Boy01_Eyes_Geo.skeleton}
                        rotation={[ Math.PI / 2, 0, 0 ]}
                        scale={0.01}
                    />
                    <skinnedMesh
                        name="h_Geo"
                        geometry={nodes.h_Geo.geometry}
                        material={materials.Boy01_Brows_MAT2}
                        skeleton={nodes.h_Geo.skeleton}
                        rotation={[ Math.PI / 2, 0, 0 ]}
                        scale={0.01}
                    />
                </group>
            </group>
        </>
    );
}

type TActionName = "Sitting_idle" | "T-pose";

interface IGLTFAction extends AnimationClip {
    name: TActionName;
}

type GLTFResult = GLTF & {
    nodes: {
        Boy01_Body_Geo: SkinnedMesh;
        Boy01_Brows_Geo: SkinnedMesh;
        Boy01_Eyes_Geo: SkinnedMesh;
        h_Geo: SkinnedMesh;
        mixamorigHips: Bone;
    };
    materials: {
        Boy01_Body_MAT1: MeshStandardMaterial;
        Boy01_Brows_MAT2: MeshStandardMaterial;
    };
    animations: IGLTFAction[];
};

useGLTF.preload("/models/entities/simon.glb");
