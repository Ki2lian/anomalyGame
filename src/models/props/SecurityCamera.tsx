/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Authors: Alexander Otterbeck (https://polyhaven.com/all?a=Alexander%20Otterbeck) and Yann Kervran (https://polyhaven.com/all?a=Yann%20Kervran)
License: CC0 (https://polyhaven.com/license)
Source: https://polyhaven.com/a/security_camera_01
Title: Security Camera 01
*/

import { Clone, useGLTF } from "@react-three/drei";
import { useMemo, useRef } from "react";
import { Bone, Euler, Group, MeshStandardMaterial, SkinnedMesh, Vector3 } from "three";
import { GLTF } from "three-stdlib";

export const SecurityCamera = () => {
    const model = useGLTF("/models/props/security_camera.glb") as GLTFResult;

    const securityCameraRef = useRef<Group>(null);

    const securityCameras = useMemo(() => {
        return [
            { position: new Vector3(8.57, 3, 2.5), rotation: new Euler(0, -Math.PI / 1.8, 0) },
            { position: new Vector3(-21.25, 2.8, -6.23), rotation: new Euler(0, 0, 0) },
        ];
    }, []);

    return (
        <>
            {securityCameras.map((securityCamera, index) => (
                <Clone
                    key={index}
                    ref={securityCameraRef}
                    object={model.scene}
                    position={securityCamera.position}
                    rotation={securityCamera.rotation}
                />
            ))}
        </>
    );
};

type GLTFResult = GLTF & {
    nodes: {
        security_camera001: SkinnedMesh;
        security_camera001_1: SkinnedMesh;
        def_root: Bone;
        tgt_root: Bone;
        ctrl_root: Bone;
    };
    materials: {
        security_camera_01: MeshStandardMaterial;
        security_camera_01_glass: MeshStandardMaterial;
    };
};

useGLTF.preload("/models/props/security_camera.glb");
