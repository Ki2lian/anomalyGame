/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Sousinho (https://sketchfab.com/sousinho)
License: SKETCHFAB Standard (https://sketchfab.com/licenses)
Source: https://sketchfab.com/3d-models/ceiling-light-880da42a3951442095cd2c4dd1c069a3
Title: Ceiling light
*/

import { Clone, useGLTF } from "@react-three/drei";
import { useMemo, useRef } from "react";
import { Group, Mesh, MeshStandardMaterial, Vector3 } from "three";
import { GLTF } from "three-stdlib";

import { IAnomalyProps } from "@/models/props/props-interface";
import useGame from "@/store/useGame";

export const CeilingLight = ({ isAnomaly, anomalyType }: IAnomalyProps) => {
    const { difficulty } = useGame();

    const model = useGLTF("/models/props/ceiling_light.glb") as GLTFResult;

    const isAnomalyMedium1 = isAnomaly && difficulty === "medium" && anomalyType === 1;

    const lightRef = useRef<Group>(null);

    const positions = useMemo(() => {
        return [
            new Vector3(0, 2.92, -2),
            new Vector3(-4.5, 2.92, -2),
            new Vector3(-9, 2.92, isAnomalyMedium1 ? -2.25 : -2),
            new Vector3(-13.5, 2.92, -2),
            new Vector3(-18, 2.92, -2),
        ];
    }, [ isAnomalyMedium1 ]);

    return (
        <>
            {positions.map((position, index) => (
                <Clone key={ index } ref={ lightRef } object={ model.scene } rotation={ [ 0, Math.PI / 2, 0 ] } position={ position } />
            ))}
        </>
    );
};

type GLTFResult = GLTF & {
    nodes: {
        SM_Overhead_light001_T_Overhead_light_0: Mesh;
    };
    materials: {
        T_Overhead_light: MeshStandardMaterial;
    };
};

useGLTF.preload("/models/props/ceiling_light.glb");
