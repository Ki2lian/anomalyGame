/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: lhaegy.fu (https://sketchfab.com/lhaegy.fu)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/simple-elevator-with-animation-770488a2f94a453fb90a7445bda63cd0
Title: Simple Elevator with Animation
*/

import { MeshReflectorMaterial, Text, useGLTF } from "@react-three/drei";
import { MeshReflectorMaterialProps } from "@react-three/drei/materials/MeshReflectorMaterial";
import { RapierRigidBody, RigidBody } from "@react-three/rapier";
import gsap from "gsap";
import { RefObject, useCallback, useEffect, useRef, useState } from "react";
import { useTranslation } from "react-i18next";
import { Group, Mesh, MeshPhysicalMaterial, MeshStandardMaterial } from "three";
import { GLTF } from "three-stdlib";

import ActionPrompt from "@/components/game/ActionPrompt";
import { globalCamera } from "@/components/game/Camera";
import ElevatorPanel from "@/components/game/ElevatorPanel";
import { isInInteractionRangeAndFacing, playSound } from "@/lib/utils";
import useGame from "@/store/useGame";

interface IDoorAnimationParams {
    rigidBodyRef: RefObject<RapierRigidBody>;
    direction: number;
    distance: number;
    duration: number;
}

export const Elevator = () => {
    const { t } = useTranslation("game", { keyPrefix: "actions" });

    const { stage } = useGame();

    const group = useRef<Group>(null);

    const reflectorRef = useRef(null);

    useEffect(() => {
        if (!reflectorRef.current) return;
        (reflectorRef.current as MeshReflectorMaterialProps).virtualCamera.layers.enable(2);
    }, []);

    const rigidBodyLeftDoorOutRef = useRef<RapierRigidBody>(null);
    const rigidBodyRightDoorOutRef = useRef<RapierRigidBody>(null);
    const doorsOutRef = useRef<Group>(null);
    const rigidBodyLeftDoorInRef = useRef<RapierRigidBody>(null);
    const rigidBodyRightDoorInRef = useRef<RapierRigidBody>(null);
    const doorsInRef = useRef<Group>(null);

    const [ doorsOpened, setDoorsOpened ] = useState(false);
    const [ doorsCanBeToggled, setDoorsCanBeToggled ] = useState(true);

    const { nodes, materials } = useGLTF("/models/props/elevator.glb") as GLTFResult;

    const animateDoor = ({ rigidBodyRef, direction, distance, duration }: IDoorAnimationParams) => {
        if (!rigidBodyRef.current) return;

        const position = rigidBodyRef.current.translation();

        gsap.to(position, {
            x: position.x + distance * direction,
            duration,
            onUpdate: () => {
                rigidBodyRef.current?.setNextKinematicTranslation({
                    x: position.x,
                    y: position.y,
                    z: position.z,
                });
            },
        });
    };

    const toggleDoors = useCallback(
        (isOpening: boolean, duration: number) => {
            if (
                !rigidBodyLeftDoorOutRef.current ||
                !rigidBodyRightDoorOutRef.current ||
                !rigidBodyLeftDoorInRef.current ||
                !rigidBodyRightDoorInRef.current
            ) {
                return;
            }

            setDoorsCanBeToggled(false);

            const directionMultiplier = isOpening ? 1 : -1;

            const doorAnimations = [
                { rigidBodyRef: rigidBodyLeftDoorOutRef, direction: -1 * directionMultiplier, distance: 1, duration },
                { rigidBodyRef: rigidBodyRightDoorOutRef, direction: 1 * directionMultiplier, distance: 1, duration },
                { rigidBodyRef: rigidBodyLeftDoorInRef, direction: -1.5 * directionMultiplier, distance: 1.5, duration },
                { rigidBodyRef: rigidBodyRightDoorInRef, direction: 1.5 * directionMultiplier, distance: 1.5, duration },
            ];

            for (const door of doorAnimations) {
                animateDoor(door);
            }

            setDoorsOpened(isOpening);
            setTimeout(() => {
                setDoorsCanBeToggled(true);
            }, duration * 1000);
        },
        [ rigidBodyLeftDoorOutRef, rigidBodyRightDoorOutRef, rigidBodyLeftDoorInRef, rigidBodyRightDoorInRef ],
    );

    const openDoors = useCallback(() => {
        if (!doorsOpened && doorsCanBeToggled) {
            toggleDoors(true, 8);
            playSound("/audio/elevator-open.wav", "action");
        }
    }, [ doorsOpened, toggleDoors, doorsCanBeToggled ]);

    const closeDoors = useCallback(() => {
        if (doorsOpened && doorsCanBeToggled) {
            toggleDoors(false, 5);
            playSound("/audio/elevator-close.wav", "action");
        }
    }, [ doorsOpened, toggleDoors, doorsCanBeToggled ]);

    const validateInteraction = useCallback(() => {
        if (doorsOpened || !doorsCanBeToggled) return false;
        const camera = globalCamera;
        return isInInteractionRangeAndFacing(camera, doorsInRef, 1.125) || isInInteractionRangeAndFacing(camera, doorsOutRef, 1.125);
    }, [ doorsOpened, doorsInRef, doorsOutRef, doorsCanBeToggled ]);

    return (
        <group ref={ group } position={ [ -22.5, -0.5135, -6.67 ] } rotation={ [ 0, -Math.PI / 2, 0 ] } scale={ 0.8 } dispose={ null }>
            <group name="Sketchfab_Scene">
                <group name="Sketchfab_model" rotation={ [ -Math.PI / 2, 0, 0 ] }>
                    <group name="root">
                        <group name="GLTF_SceneRootNode" rotation={ [ Math.PI / 2, 0, 0 ] }>
                            {/* Doors */}
                            <group ref={ doorsOutRef }>
                                <RigidBody
                                    type="kinematicPosition"
                                    ref={ rigidBodyLeftDoorOutRef }
                                    position={ [ 0.026, 1, 0 ] }
                                    rotation={ [ 0, 0, -Math.PI / 2 ] }
                                >
                                    <group name="LeftOutsideDoor_0">
                                        <mesh
                                            name="Object_4"
                                            castShadow
                                            receiveShadow
                                            geometry={ nodes.Object_4.geometry }
                                            material={ materials.Metal }
                                        />
                                    </group>
                                </RigidBody>
                                <RigidBody
                                    type="kinematicPosition"
                                    ref={ rigidBodyRightDoorOutRef }
                                    position={ [ 0.026, 1, 0 ] }
                                    rotation={ [ 0, 0, -Math.PI / 2 ] }
                                >
                                    <group name="RightOutsideDoor_1">
                                        <mesh
                                            name="Object_6"
                                            castShadow
                                            receiveShadow
                                            geometry={ nodes.Object_6.geometry }
                                            material={ materials.Metal }
                                        />
                                    </group>
                                </RigidBody>
                            </group>
                            <ActionPrompt
                                actionKey="interact"
                                description={ t("openDoors") }
                                validateInteraction={ validateInteraction }
                                onAction={ openDoors }
                            />
                            <RigidBody type="fixed" position={ [ 0.225, 1, 0 ] } rotation={ [ 0, 0, -Math.PI / 2 ] } colliders="trimesh">
                                <group name="Wall_2">
                                    <mesh name="Object_8" castShadow receiveShadow geometry={ nodes.Object_8.geometry } material={ materials.Wall } />
                                </group>
                            </RigidBody>
                            <group name="ElevatorOutsideArmature_3" position={ [ 0.114, 1, 0 ] } rotation={ [ 0, 0, -Math.PI / 2 ] }>
                                <mesh name="Object_10" castShadow receiveShadow geometry={ nodes.Object_10.geometry } material={ materials.Metal } />
                            </group>
                            <group name="ElevatorCage_11" position={ [ -0.04, 1.015, 0 ] }>
                                <mesh position={ [ -0.1, 1.92, 0 ] } rotation={ [ 0, -Math.PI / 2, 0 ] } scale={ 0.5 }>
                                    <boxGeometry args={ [ 0.5, 0.5, 0.005 ] } />
                                    <meshStandardMaterial color={ "black" } />
                                    <Text
                                        name="stayHere"
                                        position={ [ 0, 0, 0.01 ] }
                                        textAlign="center"
                                        anchorX="center"
                                        anchorY="middle"
                                        maxWidth={ 3.6 }
                                        whiteSpace="overflowWrap"
                                        fontSize={ 0.4 }
                                    >
                                        {stage.currentStage}
                                    </Text>
                                </mesh>
                                <RigidBody type="fixed" colliders="trimesh">
                                    <mesh name="Object_12" castShadow receiveShadow geometry={ nodes.Object_12.geometry } material={ materials.Metal } />
                                </RigidBody>
                                <mesh name="Object_13" castShadow receiveShadow geometry={ nodes.Object_13.geometry } material={ materials.Emission } />
                                <group name="ElevatorInteriorButtons_4" position={ [ -0.507, 0.733, -1.404 ] } rotation={ [ Math.PI / 2, -Math.PI / 2, 0 ] }>
                                    <mesh name="Object_15" castShadow receiveShadow geometry={ nodes.Object_15.geometry } material={ materials.Metal } />
                                    <mesh
                                        name="Object_16"
                                        castShadow
                                        receiveShadow
                                        geometry={ nodes.Object_16.geometry }
                                        material={ materials.Buttons }
                                    />
                                    <ElevatorPanel closeDoors={ closeDoors } doorsCanBeToggled={ doorsCanBeToggled } />
                                </group>
                                <group name="HandleElevator_5" position={ [ -1.407, 0.069, 1.294 ] } rotation={ [ 0, -Math.PI / 2, 0 ] }>
                                    <mesh name="Object_18" castShadow receiveShadow geometry={ nodes.Object_18.geometry } material={ materials.Metal } />
                                    <mesh
                                        name="Object_19"
                                        castShadow
                                        receiveShadow
                                        geometry={ nodes.Object_19.geometry }
                                        material={ materials.DarkerMetal }
                                    />
                                </group>
                                <group name="HandleElevator001_6" position={ [ -2.589, 0.069, -0.028 ] }>
                                    <mesh name="Object_21" castShadow receiveShadow geometry={ nodes.Object_21.geometry } material={ materials.Metal } />
                                    <mesh
                                        name="Object_22"
                                        castShadow
                                        receiveShadow
                                        geometry={ nodes.Object_22.geometry }
                                        material={ materials.DarkerMetal }
                                    />
                                </group>
                                <group name="HandleElevator002_7" position={ [ -1.407, 0.069, -1.375 ] } rotation={ [ 0, -Math.PI / 2, 0 ] }>
                                    <mesh name="Object_24" castShadow receiveShadow geometry={ nodes.Object_24.geometry } material={ materials.Metal } />
                                    <mesh
                                        name="Object_25"
                                        castShadow
                                        receiveShadow
                                        geometry={ nodes.Object_25.geometry }
                                        material={ materials.DarkerMetal }
                                    />
                                </group>
                                <group ref={ doorsInRef }>
                                    <RigidBody
                                        type="kinematicPosition"
                                        ref={ rigidBodyLeftDoorInRef }
                                        position={ [ -0.008, 0, 0 ] }
                                        rotation={ [ 0, 0, -Math.PI / 2 ] }
                                    >
                                        <group name="LeftInteriorDoor_8">
                                            <mesh
                                                name="Object_27"
                                                castShadow
                                                receiveShadow
                                                geometry={ nodes.Object_27.geometry }
                                                material={ materials.Metal }
                                            />
                                        </group>
                                    </RigidBody>
                                    <RigidBody
                                        type="kinematicPosition"
                                        ref={ rigidBodyRightDoorInRef }
                                        position={ [ -0.01, 0.4, -0.003 ] }
                                        rotation={ [ 0, 0, -Math.PI / 2 ] }
                                    >
                                        <group name="RightInteriorDoor_10">
                                            <mesh
                                                name="Object_32"
                                                castShadow
                                                receiveShadow
                                                geometry={ nodes.Object_32.geometry }
                                                material={ materials.Metal }
                                            />
                                        </group>
                                    </RigidBody>
                                </group>
                                <group name="Mirror_9" position={ [ -2.643, 1.456, -0.026 ] } rotation={ [ 0, 0, -Math.PI / 2 ] } scale={ [ 1.083, 1, 1.092 ] }>
                                    <mesh name="Object_29" castShadow receiveShadow geometry={ nodes.Object_29.geometry } />
                                    <mesh rotation={ [ -Math.PI / 2, 0, 0 ] } position={ [ 0, 0.03, 0 ] }>
                                        <planeGeometry args={ [ 1.9, 1.9, 1.9 ] } />
                                        <MeshReflectorMaterial
                                            ref={ reflectorRef }
                                            blur={ [ 512, 512 ] }
                                            resolution={ 2048 }
                                            mirror={ 1 }
                                            mixBlur={ 0 }
                                            mixStrength={ 1.5 }
                                        />
                                    </mesh>
                                    <RigidBody type="fixed">
                                        <mesh
                                            name="Object_30"
                                            castShadow
                                            receiveShadow
                                            geometry={ nodes.Object_30.geometry }
                                            material={ materials.DarkerMetal }
                                        />
                                    </RigidBody>
                                </group>
                            </group>
                            <group name="ElevatorCallingButtons_12" position={ [ 0.173, 1.463, -1.335 ] } rotation={ [ 0, 0, -Math.PI / 2 ] } scale={ 1.192 }>
                                <mesh name="Object_34" castShadow receiveShadow geometry={ nodes.Object_34.geometry } material={ materials.Metal } />
                                <mesh name="Object_35" castShadow receiveShadow geometry={ nodes.Object_35.geometry } material={ materials.Emission } />
                            </group>
                            <group name="ElevatorCallingButtons007_13" position={ [ 0.188, 3.322, 0.086 ] }>
                                <mesh name="Object_37" castShadow receiveShadow geometry={ nodes.Object_37.geometry } material={ materials.Emission } />
                            </group>
                            <group
                                name="ElevatorCallingButtons006_14"
                                position={ [ 0.188, 3.283, -0.072 ] }
                                rotation={ [ Math.PI, 0, Math.PI ] }
                                scale={ 0.01 }
                            >
                                <mesh name="Object_39" castShadow receiveShadow geometry={ nodes.Object_39.geometry } material={ materials.Emission } />
                            </group>
                            <group
                                name="ElevatorCallingButtons003_15"
                                position={ [ 0.188, 3.3, 0 ] }
                                rotation={ [ -Math.PI / 2, 0, -Math.PI / 2 ] }
                                scale={ 1.322 }
                            >
                                <mesh
                                    name="Object_41"
                                    castShadow
                                    receiveShadow
                                    geometry={ nodes.Object_41.geometry }
                                    material={ materials.DarkerMetal }
                                />
                            </group>
                            {/* <group name="Plane_16" position={[ -0.785, 0, -0.114 ]}>
                                <mesh name="Object_43" castShadow receiveShadow geometry={nodes.Object_43.geometry} material={materials.Wall} />
                            </group> */}
                        </group>
                    </group>
                </group>
            </group>
        </group>
    );
};

type GLTFResult = GLTF & {
    nodes: {
        Object_4: Mesh;
        Object_6: Mesh;
        Object_8: Mesh;
        Object_10: Mesh;
        Object_12: Mesh;
        Object_13: Mesh;
        Object_15: Mesh;
        Object_16: Mesh;
        Object_18: Mesh;
        Object_19: Mesh;
        Object_21: Mesh;
        Object_22: Mesh;
        Object_24: Mesh;
        Object_25: Mesh;
        Object_27: Mesh;
        Object_29: Mesh;
        Object_30: Mesh;
        Object_32: Mesh;
        Object_34: Mesh;
        Object_35: Mesh;
        Object_37: Mesh;
        Object_39: Mesh;
        Object_41: Mesh;
        Object_43: Mesh;
    };
    materials: {
        Metal: MeshPhysicalMaterial;
        Wall: MeshStandardMaterial;
        Emission: MeshStandardMaterial;
        Buttons: MeshStandardMaterial;
        DarkerMetal: MeshStandardMaterial;
        Mirror: MeshStandardMaterial;
    };
};

useGLTF.preload("/models/props/elevator.glb");
