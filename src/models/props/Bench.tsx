/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: JungleBird (https://sketchfab.com/junglebird)
License: SKETCHFAB Standard (https://sketchfab.com/licenses)
Source: https://sketchfab.com/3d-models/bench-343ea60382e241f4aadd38ea52299914
Title: Bench
*/

import { Clone, useGLTF } from "@react-three/drei";
import { RigidBody } from "@react-three/rapier";
import { useMemo, useRef } from "react";
import { Group, Mesh, MeshStandardMaterial, Vector3 } from "three";
import { GLTF } from "three-stdlib";

import { IAnomalyProps } from "@/models/props/props-interface";
import useGame from "@/store/useGame";

export const Bench = ({ isAnomaly, anomalyType }: IAnomalyProps) => {
    const { difficulty } = useGame();

    const model = useGLTF("/models/props/bench.glb") as GLTFResult;

    const isAnomalyMedium1 = isAnomaly && difficulty === "medium" && anomalyType === 1;

    const benchRef = useRef<Group>(null);

    const positions = useMemo(() => {
        return [
            new Vector3(7.5, -0.12, 2.65),
            new Vector3(4.5, -0.12, 2.65),
            new Vector3(1.5, -0.12, 2.65),
            new Vector3(-1.5, -0.12, 2.65),
            new Vector3(-4.5, -0.12, 2.65),
            new Vector3(-7.5, -0.12, 2.65),
            isAnomalyMedium1 ? new Vector3(-10.75, -0.12, 2.65) : new Vector3(-10.5, -0.12, 2.65),
            new Vector3(-13.5, -0.12, 2.65),
            new Vector3(-16.5, -0.12, 2.65),
            new Vector3(-19.5, -0.12, 2.65),
            new Vector3(-22.5, -0.12, 2.65),
            new Vector3(-25.5, -0.12, 2.65),
        ];
    }, [ isAnomalyMedium1 ]);

    return (
        <>
            {positions.map((position, index) => (
                <RigidBody key={index} type="fixed" position={position} rotation={[ 0, Math.PI / 2, 0 ]}>
                    <Clone key={index} ref={benchRef} object={model.scene} />
                </RigidBody>
            ))}
        </>
    );
};

type GLTFResult = GLTF & {
    nodes: {
      Object_4: Mesh
    }
    materials: {
      bench04: MeshStandardMaterial
    }
  }
useGLTF.preload("/models/props/bench.glb");
